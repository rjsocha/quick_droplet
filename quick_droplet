#!/usr/bin/env bash

# Support tool for easy creation of vm with dns entry (terraform based) on Digital Ocean
# Usage:
#
# Create droplet
# quick_droplet hostname config1:value1 config2:value2 .... configN:valueN
#
# Remove droplet
# quick_droplet -hostname

# Exatra options/commands
# -v enable verbose mode
# show-domains - list supported domains
# show-defaults - show defaults for droplet's creation
# show-regions - shows DO regions
# show-sizes - show DO dropletes sizes

# DO's TOKEN is required
# TOKEN should be setup as env variable 
# Fromat:
#  PREFIX_DIGITALOCEAN_TOKEN
# Where PREFIX is diffrent for each account (run quick_droplet show-domains for prefix list)

# SSH Keys
# Keys could be specified as predefined names (SUPPORTED_SSH_KEYS)
# or as fingerprint
# ssh_keys = ssh

# Example
# ./quick_droplet test.do.nauka.ga size:512mb ssh:socha

# Droplet configuration:

# region:REGION  - which region (default AMS3) - show-regsions
# size:SIZE      - droplet size (default s-1vcpu-1gb) - show-sizes
# image:IMAGE    - droplet image template/slug (default ubuntu-18-04-x64) -> doctl compute image list-distribution

WORKDIR="$HOME/.config/quick_droplet"

# domain:VAR:provider
SUPPORTED_DOMAINS=(
 do.nauka.ga:NAUKA
)

declare -A SUPPORTED_SSH_KEYS
SUPPORTED_SSH_KEYS[socha]="8b:e7:3b:5a:23:86:de:ef:ce:c3:7c:26:81:58:be:58"

declare -A RESOURCE
RESOURCE[image]="ubuntu-18-04-x64"
RESOURCE[region]="fra1"
RESOURCE[size]="s-1vcpu-1gb"
RESOURCE[ipv6]="false"
RESOURCE[private_networking]="false"
RESOURCE[ssh_keys]="socha"

BE_VERBOSE=0
if [[ $1 == "-v" ]]
then
  BE_VERBOSE=1
  shift
fi


if [[ $1 == "show-defaults" ]]
then
  for _key in "${!RESOURCE[@]}"
  do 
    echo "${_key}=${RESOURCE[$_key]}"
  done | sort
  exit 0
fi

if [[ $1 == "show-domains" ]]
then
  for supported in ${SUPPORTED_DOMAINS[@]}
  do
    IFS=":" read _domain _var _provider <<< "$supported"
    echo "$_domain / $_var / ${_var}_DIGITALOCEAN_TOKEN"
  done | sort
  exit 0
fi

if [[ $1 == "show-regions" ]]
then
cat <<EOF
Slug    Name               Available
nyc1    New York 1         true
sgp1    Singapore 1        true
lon1    London 1           true
nyc3    New York 3         true
ams3    Amsterdam 3        true
fra1    Frankfurt 1        true
tor1    Toronto 1          true
sfo2    San Francisco 2    true
blr1    Bangalore 1        true
EOF
exit 0
fi

if [[ $1 == "show-size" || $1 == "show-sizes" ]]
then
cat <<EOF
Slug               Memory    VCPUs    Disk    Price Monthly    Price Hourly
512mb              512       1        20      5.00             0.007440
s-1vcpu-1gb        1024      1        25      5.00             0.007440
1gb                1024      1        30      10.00            0.014880
s-1vcpu-2gb        2048      1        50      10.00            0.014880
s-1vcpu-3gb        3072      1        60      15.00            0.022320
s-2vcpu-2gb        2048      2        60      15.00            0.022320
s-3vcpu-1gb        1024      3        60      15.00            0.022320
2gb                2048      2        40      20.00            0.029760
s-2vcpu-4gb        4096      2        80      20.00            0.029760
4gb                4096      2        60      40.00            0.059520
c-2                4096      2        25      40.00            0.060000
m-1vcpu-8gb        8192      1        40      40.00            0.059524
s-4vcpu-8gb        8192      4        160     40.00            0.059520
g-2vcpu-8gb        8192      2        25      60.00            0.089286
gd-2vcpu-8gb       8192      2        50      65.00            0.096726
m-16gb             16384     2        60      75.00            0.111607
8gb                8192      4        80      80.00            0.119050
c-4                8192      4        50      80.00            0.119000
s-6vcpu-16gb       16384     6        320     80.00            0.119050
g-4vcpu-16gb       16384     4        50      120.00           0.178571
gd-4vcpu-16gb      16384     4        100     130.00           0.193452
m-32gb             32768     4        90      150.00           0.223214
16gb               16384     8        160     160.00           0.238100
c-8                16384     8        100     160.00           0.238000
s-8vcpu-32gb       32768     8        640     160.00           0.238100
s-12vcpu-48gb      49152     12       960     240.00           0.357140
g-8vcpu-32gb       32768     8        100     240.00           0.357143
gd-8vcpu-32gb      32768     8        200     260.00           0.386905
m-64gb             65536     8        200     300.00           0.446429
32gb               32768     12       320     320.00           0.476190
c-16               32768     16       200     320.00           0.476000
s-16vcpu-64gb      65536     16       1280    320.00           0.476190
48gb               49152     16       480     480.00           0.714290
s-20vcpu-96gb      98304     20       1920    480.00           0.714290
g-16vcpu-64gb      65536     16       200     480.00           0.714286
gd-16vcpu-64gb     65536     16       400     520.00           0.773810
m-128gb            131072    16       340     600.00           0.892857
64gb               65536     20       640     640.00           0.952380
c-32               65536     32       400     640.00           0.952000
s-24vcpu-128gb     131072    24       2560    640.00           0.952380
s-32vcpu-192gb     196608    32       3840    960.00           1.428570
g-32vcpu-128gb     131072    32       400     960.00           1.428570
gd-32vcpu-128gb    131072    32       800     1040.00          1.547620
m-224gb            229376    32       500     1100.00          1.636900
gd-40vcpu-160gb    163840    40       1000    1300.00          1.934520
EOF
exit
fi
if ! command -v terraform &>/dev/null
then
  echo "Terraform command is missing!"
  exit 1
fi

if [[ ! -d $WORKDIR ]]
then
  mkdir -p -m 700 "$WORKDIR"
fi

if [[ ! -d $WORKDIR ]]
then
  echo "Missing working directory: $WORKDIR"
  exit 1
fi

_hostname=$1
shift

if [[ -z $_hostname ]]
then
	echo "Missing hostname!"
	exit 1
fi

_found=0
for supported in ${SUPPORTED_DOMAINS[@]}
do
  IFS=":" read _domain _var _provider <<< "$supported"
  if [[ $_hostname == *${_domain} ]]
  then
    _found=1
    break
  fi
done
if [[ $_found -ne 1 ]]
then
  echo "Unsupported domain name: $_hostname"
  exit 1
fi

if [[ $_hostname =~ ^- ]]
then
  _hostname="${_hostname#-}"
  echo "Removing droplet $_hostname"
  if [[ ! -f $WORKDIR/$_hostname/terraform.tfstate ]]
  then
    echo "Missing correct state file for $_hostname!"
    exit 1
  fi
  cd $WORKDIR/$_hostname
  terraform destroy -auto-approve
  if [[ $? -eq 0 ]]
  then
    cd
    rm -rf $WORKDIR/$_hostname
  else
    echo "Unable to remove droplet ($WORKDIR/$_hostname)!"
    exit 1
  fi
  exit 
fi
dns_entry=()
while [[ $# -gt 0 ]]
do
  _arg="${1/=/:}"
  shift
  [[ $_arg =~ : ]] || continue
  _name="${_arg%%:*}"
  _val="${_arg#*:}"
  case ${_name,,} in
    ssh)
      _name="ssh_keys"
      ;;
    lan)
      _name="private_networking"
      ;;
    dns)
      dns_entry+=($_val)
      continue
      ;;
  esac
  RESOURCE[$_name]=$_val
done

DO_TOKEN="${_var}_DIGITALOCEAN_TOKEN"
if [[ -z ${!DO_TOKEN} ]]
then
  echo "Missing Digitl Ocean API token (${DO_TOKEN})!"
  exit 1
fi

if [[ $_hostname == $_domain ]]
then
  echo "Hostname is the same as domain name!"
  exit 1
fi
_hn="${_hostname%%.$_domain}"
_hn="${_hn,,}"

if [[ -z $_hn ]]
then
  echo "Missing correct hostname!"
  exit 1
fi

if [[ ! $_hn =~ ^[a-z] ]]
then
  echo "Incorrect hostname: $_hn"
  exit 1
fi
if [[ $BE_VERBOSE -eq 1 ]] 
then
  echo "Creating: ${_hn}.${_domain}" >&2
  for _key in "${!RESOURCE[@]}"
  do 
    echo "${_key}=${RESOURCE[$_key]}" >&2
  done | sort
fi
node_name="${_hn//./_}"
node_cfg='variable "'${DO_TOKEN}'" {\n'
node_cfg+='\ttype = string\n}\n'
node_cfg+='provider "digitalocean" {\n'
node_cfg+='\ttoken = var.'${DO_TOKEN}'\n}\n'
node_cfg+='resource "digitalocean_droplet" "'${node_name}'" {\n'
node_cfg+='\tname = "'$_hn'.'${_domain}'"\n'
node_cfg+='\timage = "'${RESOURCE['image']}'"\n'
node_cfg+='\tregion = "'${RESOURCE['region']}'"\n'
node_cfg+='\tipv6 = '${RESOURCE['ipv6']}'\n'
node_cfg+='\tsize = "'${RESOURCE['size']}'"\n'
node_cfg+='\tprivate_networking = '${RESOURCE['private_networking']}'\n'
ssh_keys="${RESOURCE['ssh_keys']}"
declare -A keys
for key in ${ssh_keys//,/ }
do
  if [[ ! $key =~ ^([a-fA-F0-9]{2}:){15}[a-fA-F0-9]{2}$ ]]
  then
    if [[ -z ${SUPPORTED_SSH_KEYS[$key]} ]]
    then
      echo "Missing SSH KEY for: $key"
      exit 1
    fi
    key="${SUPPORTED_SSH_KEYS[$key]}"
  fi
  key="${key,,}"
  keys[$key]=$key
done
ssh_keys=""
for key in ${keys[@]}
do
  [[ -z $ssh_keys ]] && ssh_keys='"'$key'"' || ssh_keys+=',"'$key'"'
done
node_cfg+='\tssh_keys = ['$ssh_keys']\n'
node_cfg+='}\n'
node_cfg+='resource "digitalocean_record" "'${node_name}'" {\n'
node_cfg+='\tdomain =  "'$_domain'"\n'
node_cfg+='\ttype   =  "A"\n'
node_cfg+='\tname   =  "'$_hn'"\n'
node_cfg+='\tttl    = 300\n'
node_cfg+='\tvalue = digitalocean_droplet.'${node_name}'.ipv4_address\n'
node_cfg+='}\n'
if [[ ${RESOURCE['ipv6']} == "true" ]]
then
  node_cfg+='resource "digitalocean_record" "'${node_name}_ip6'" {\n'
  node_cfg+='\tdomain =  "'$_domain'"\n'
  node_cfg+='\ttype   =  "AAAA"\n'
  node_cfg+='\tname   =  "'$_hn'"\n'
  node_cfg+='\tttl    = 300\n'
  node_cfg+='\tvalue = digitalocean_droplet.'${node_name}'.ipv6_address\n'
  node_cfg+='}\n'
fi
count=0
for dns in ${dns_entry[@]}
do
  node_cfg+='resource "digitalocean_record" "'${node_name}${count}'" {\n'
  node_cfg+='\tdomain =  "'$_domain'"\n'
  node_cfg+='\ttype   =  "A"\n'
  node_cfg+='\tname   =  "'$dns'"\n'
  node_cfg+='\tttl    = 300\n'
  node_cfg+='\tvalue = digitalocean_droplet.'${node_name}'.ipv4_address\n'
  node_cfg+='}\n'
  if [[ ${RESOURCE['ipv6']} == "true" ]]
  then
    node_cfg+='resource "digitalocean_record" "'${node_name}${count}_ip6'" {\n'
    node_cfg+='\tdomain =  "'$_domain'"\n'
    node_cfg+='\ttype   =  "AAAA"\n'
    node_cfg+='\tname   =  "'$dns'"\n'
    node_cfg+='\tttl    = 300\n'
    node_cfg+='\tvalue = digitalocean_droplet.'${node_name}'.ipv6_address\n'
    node_cfg+='}\n'
  fi
  ((count++)) || true
done

node_cfg+='output "'${node_name}'" {\n'
node_cfg+='\tvalue = "'$_hn'.'${_domain}' / ${digitalocean_droplet.'$node_name'.ipv4_address}"\n'
node_cfg+='}\n'

if [[ ${RESOURCE['ipv6']} == "true" ]]
then
 node_cfg+='output "'${node_name}'_ip6" {\n'
 node_cfg+='\tvalue = "'$_hn'.'${_domain}' / ${digitalocean_droplet.'$node_name'.ipv6_address}"\n'
 node_cfg+='}\n'
fi

if [[ -d $WORKDIR/$_hostname ]]
then
  echo "State directory for $_hostname already exists...aborting!"
  exit 1
fi
mkdir $WORKDIR/$_hostname
if [[ $? -ne 0 ]]
then
  echo "Unable to create state directory for $_hostname ($WORKDIR/$_hostname)"
  exit 1
fi
printf "$node_cfg" >$WORKDIR/$_hostname/droplet.tf
cd $WORKDIR/$_hostname
terraform init -input=false
if [[ $? -ne 0 ]]
then
  echo "Unable to initialize terraform!"
  exit 1
fi
export TF_VAR_${DO_TOKEN}="${!DO_TOKEN}"
terraform apply -auto-approve -input=false
if [[ $? -ne 0 ]]
then
  echo "Unable to create new droplet!"
  exit 1
fi
exit 0
# vim: set tabstop=2 shiftwidth=2 expandtab autoindent indentexpr= nosmartindent : 
